/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PoliceStationManagement;
import SQLPackage.*;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class CaseTable extends javax.swing.JFrame {

    CaseUpdate caseupdate = new CaseUpdate();
    String SectionNo ,PoliceStationId ,PoliceOfficerId ,MagistrateSection,StolenGoods ,RevivedGoods ,
        CaseAcceptance ,ComplainLetterNo ,FinalReport ,CriminalStatus ,InvestigatingOfficerName,
        CaseFilerName ,AreaOfCrime ,ClosingDate ,ReceivingDate ,TypeOfCase;
    public CaseTable() {
        initComponents();
        Font font = new Font("Tahoma", Font.PLAIN, 20);
        this.CaseTable.setFont(font);
        int gap = 15;
        this.CaseTable.setRowHeight(this.CaseTable.getRowHeight()+gap);
        try {
            ShowCase();
        } catch (SQLException ex) {
            Logger.getLogger(CaseTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
        public ArrayList<Cases> CaseList() throws SQLException
    {
        ArrayList<Cases> CaseList = new ArrayList<>();
        ConnectMSSQL cnObj = new ConnectMSSQL();
        cnObj.connectDB();
        String Query1="SELECT * FROM Cases";  
        Statement st=cnObj.connection.createStatement();
        ResultSet rs= st.executeQuery(Query1);
        Cases CasesObj;
        while(rs.next())
        {   
            CasesObj=new Cases(rs.getInt("CaseNo"),
            rs.getInt ("SectionNo"),rs.getInt("PoliceStationId"),rs.getInt("PoliceOfficerId"),rs.getInt ("MagistrateSection") ,rs.getString ("StolenGoods"),rs.getString ("RevivedGoods"),
            rs.getString ("CaseAcceptance"), rs.getInt ("ComplainLetterNo"),rs.getString ("FinalReport"),rs.getString ("CriminalStatus"),
            rs.getString ("InvestigatingOfficerName"),rs.getString ("CaseFilerName"),rs.getString ("AreaOfCrime"),rs.getString ("ClosingDate"),
            rs.getString("ReceivingDate"),rs.getString("TypeOfCase"));
            
            
            CaseList.add(CasesObj);
        }
        return CaseList;
    }

    public void ShowCase() throws SQLException
    {
        ArrayList<Cases> cList=CaseList();
        DefaultTableModel Model= (DefaultTableModel)CaseTable.getModel();
        Object[] row= new Object[17];
        for(int i=0;i<cList.size();i++)
        {
            row[0]=cList.get(i).getCaseNo();
            row[1]=cList.get(i).getSectionNo();
            row[2]=cList.get(i).getMagistrateSection();
            row[3]=cList.get(i).getStolenGoods();  
            row[4]=cList.get(i).getRevivedGoods();
            row[5]=cList.get(i).getCaseAcceptance();
            row[6]=cList.get(i).getComplainLetterNo();
            row[7]=cList.get(i).getFinalReport(); 
            row[8]=cList.get(i).getCriminalStatus();
            row[9]=cList.get(i).getInvestigatingOfficerName();
            row[10]=cList.get(i).getCaseFilerName();
            row[11]=cList.get(i).getAreaOfCrime();
            row[12]=cList.get(i).getClosingDate();
            row[13]=cList.get(i).getReceivingDate();
            row[14]=cList.get(i).getTypeOfCase();
            row[15]=cList.get(i).getPoliceStationId();
            row[16]=cList.get(i).getPoliceOfficerId();
            
            Model.addRow(row);
        }
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton_back = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SearchTextField = new javax.swing.JTextField();
        SearchComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CaseTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CasesComboBox = new javax.swing.JComboBox<>();
        SORT = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jButton_back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_back.setText("BACK");
        jButton_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_backActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_back);
        jButton_back.setBounds(50, 690, 160, 50);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("CASE TABLE");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(450, 150, 310, 58);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Search By :");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(80, 50, 110, 20);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Search : ");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(420, 50, 80, 20);

        SearchTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        SearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTextFieldKeyReleased(evt);
            }
        });
        jPanel1.add(SearchTextField);
        SearchTextField.setBounds(500, 36, 380, 40);

        SearchComboBox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SearchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--Select--", "CaseNo", "SectionNo", "MagistrateSection", "StolenGoods", "RevivedGoods", "CaseAcceptance", "ComplainLetterNo", "FinalReport", "CriminalStatus", "InvestigatingOfficer", "CaseFiler", "AreaOfCrime", "ClosingDate", "ReceivingDate", "TypeOfCase", "PoliceOfficerId", "PoliceStationId" }));
        SearchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(SearchComboBox);
        SearchComboBox.setBounds(180, 36, 200, 40);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("UPDATE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(840, 690, 150, 50);

        CaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CaseNo", "SectionNo", "MagistrateSection", "StolenGoods", "RevivedGoods", "CaseAcceptance", "ComplainLetterNo", "FinalReport", "CriminalStatus", "InvestigatingOfficer", "CaseFiler", "AreaOfCrime", "ClosingDate", "ReceivingDate", "TypeOfCase", "PoliceStationId", "PoliceOfficerId"
            }
        ));
        CaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CaseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CaseTable);
        if (CaseTable.getColumnModel().getColumnCount() > 0) {
            CaseTable.getColumnModel().getColumn(0).setResizable(false);
            CaseTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 230, 1250, 402);

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);
        deleteButton.setBounds(1040, 690, 150, 50);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PoliceStationManagement/logo.png"))); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(1010, 10, 220, 209);

        CasesComboBox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CasesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CaseNo", "SectionNo", "MagistrateSection", "StolenGoods", "RevivedGoods", "CaseAcceptance", "ComplaintLetterNo", "FinalReport", "CriminalStatus", "InvestigatingOfficer", "CaseFilerName", "AreaOfCrime", "ClosingDate", "ReceivingDate", "TypeOfCase", "PoliceStationId", "PoliceOfficerId" }));
        CasesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CasesComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(CasesComboBox);
        CasesComboBox.setBounds(180, 100, 200, 40);

        SORT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SORT.setForeground(new java.awt.Color(255, 255, 255));
        SORT.setText("SORT:");
        jPanel1.add(SORT);
        SORT.setBounds(80, 100, 70, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PoliceStationManagement/bg_pic.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1250, 890);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1250, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_backActionPerformed
        // TODO add your handling code here:
          MainPage mObj = new MainPage();
        mObj.show();
        this.setVisible(false);
    }//GEN-LAST:event_jButton_backActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
         try{
            ConnectMSSQL cnObj = new ConnectMSSQL();
            cnObj.connectDB();
            int row = CaseTable.getSelectedRow();
            String value = (CaseTable.getModel().getValueAt(row, 0).toString());
            
            String query2 = "DELETE FROM Victim WHERE CaseNo = "+value;
            String query3 = "DELETE FROM Accused WHERE CaseNo = "+value;
            String query4 = "DELETE FROM Evidence WHERE CaseNo = "+value;
            String query5 = "DELETE FROM Witness WHERE CaseNo = "+value;
         
            PreparedStatement pst2 = (PreparedStatement) cnObj.connection.prepareStatement(query2);
            PreparedStatement pst3 = (PreparedStatement) cnObj.connection.prepareStatement(query3);
            PreparedStatement pst4 = (PreparedStatement) cnObj.connection.prepareStatement(query4);
            PreparedStatement pst5 = (PreparedStatement) cnObj.connection.prepareStatement(query5);
           
            pst2.executeUpdate();
            pst3.executeUpdate();
            pst4.executeUpdate();
            pst5.executeUpdate();
            
            String query = "DELETE FROM Cases WHERE CaseNo = "+value;
            PreparedStatement pst = (PreparedStatement) cnObj.connection.prepareStatement(query);
            pst.executeUpdate();
            
            DefaultTableModel model = (DefaultTableModel) CaseTable.getModel();
            model.setRowCount(0);
            ShowCase();
            JOptionPane.showMessageDialog(null,"Deleted Successfully!!");
            
        }
        catch(Exception e){
            Logger.getLogger(VictimPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void SearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTextFieldKeyReleased
        // TODO add your handling code here:
        String columnToSearch = SearchComboBox.getSelectedItem().toString();
        String stringToSearch = SearchTextField.getText();
        try{
            ConnectMSSQL cnObj = new ConnectMSSQL();
            cnObj.connectDB();
            DefaultTableModel Model= (DefaultTableModel)CaseTable.getModel();
            Model.setRowCount(0);
            Object[] row= new Object[17];
            if("CaseNo".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE CaseNo LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("SectionNo".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE SectionNo LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("MagistrateSection".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE MagistrateSection LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("StolenGoods".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE StolenGoods LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("RevivedGoods".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE RevivedGoods LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("CaseAcceptance".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE CaseAcceptance LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("ComplainLetterNo".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE ComplainLetterNo LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("FinalReport".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE FinalReport LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("CriminalStatus".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE CriminalStatus LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("InvestigatingOfficer".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE InvestigatingOfficerName LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("CaseFiler".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE CaseFilerName LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("AreaOfCrime".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE AreaOfCrime LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                   row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("ClosingDate".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE ClosingDate LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("ReceivingDate".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE ReceivingDate LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("TypeOfCase".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE TypeOfCase LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("PoliceOfficerId".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE PoliceOfficerId LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
            else if("PoliceStationId".equals(columnToSearch))
            {
                String query = "SELECT * FROM Cases WHERE PoliceStationId LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getInt ("SectionNo");
                    row[2] = rs.getInt("MagistrateSection");
                    row[3] = rs.getString("StolenGoods");
                    row[4] = rs.getString ("RevivedGoods");
                    row[5] = rs.getString ("CaseAcceptance");
                    row[6] = rs.getInt ("ComplainLetterNo");
                    row[7] = rs.getString ("FinalReport");
                    row[8] = rs.getString ("CriminalStatus");
                    row[9] = rs.getString ("InvestigatingOfficerName");
                    row[10] = rs.getString ("CaseFilerName");
                    row[11] = rs.getString ("AreaOfCrime");
                    row[12] = rs.getString ("ClosingDate");
                    row[13] = rs.getString ("ReceivingDate");
                    row[14] = rs.getString ("TypeOfCase");
                    row[15] = rs.getInt("PoliceStationId");
                    row[16] = rs.getInt("PoliceOfficerId");
                    
                    Model.addRow(row);
                }
            
            }
             else if("".equals(columnToSearch))
            {
                ShowCase();
            }
        }catch(Exception e){
            Logger.getLogger(VictimPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_SearchTextFieldKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        
        caseupdate.setVisible(true);

        caseupdate.jTextField_sectionNo.setText(SectionNo);
        caseupdate.PoliceStationIdTextField.setText(PoliceStationId);
        caseupdate.PoliceOfficerIdTextField.setText(PoliceOfficerId);
        caseupdate.jTextField_MagistrateSection.setText(MagistrateSection);
        caseupdate.jTextField_StolenGoods.setText(StolenGoods);
        caseupdate.jTextField_RevivedGoods.setText(RevivedGoods);
        caseupdate.jTextField_CaseAcceptance.setText(CaseAcceptance);
        caseupdate.jTextField_ComplainLetterNo.setText(ComplainLetterNo);
        caseupdate.jTextField_FinalReport.setText(FinalReport);
        caseupdate.jTextField_CriminalStatus.setText(CriminalStatus);
        caseupdate.jTextField_InvestigatingOfficerName.setText(InvestigatingOfficerName);
        caseupdate.jTextField_CaseFilerName.setText(CaseFilerName);
        caseupdate.jTextField_AreaOfCrime.setText(AreaOfCrime);
        caseupdate.jTextField_ClosingDate.setText(ClosingDate);
        caseupdate.jTextField_ReceivingDate.setText(ReceivingDate);
        caseupdate.jTextField_TypeOfCase.setText(TypeOfCase);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CaseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CaseTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = CaseTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) CaseTable.getModel();
         
         SectionNo = model.getValueAt(selectedRow, 1).toString();
         PoliceStationId = model.getValueAt(selectedRow, 15).toString();
         PoliceOfficerId = model.getValueAt(selectedRow, 16).toString();
         MagistrateSection = model.getValueAt(selectedRow, 2).toString();
         StolenGoods = model.getValueAt(selectedRow, 3).toString();
         RevivedGoods = model.getValueAt(selectedRow, 4).toString();
         CaseAcceptance = model.getValueAt(selectedRow, 5).toString();
         ComplainLetterNo = model.getValueAt(selectedRow,6).toString();
         FinalReport = model.getValueAt(selectedRow, 7).toString();
         CriminalStatus = model.getValueAt(selectedRow, 8).toString();
         InvestigatingOfficerName =model.getValueAt(selectedRow,9).toString();
         CaseFilerName =model.getValueAt(selectedRow, 10).toString();
         AreaOfCrime =model.getValueAt(selectedRow, 11).toString();
         ClosingDate =model.getValueAt(selectedRow, 12).toString();
         ReceivingDate =model.getValueAt(selectedRow,13).toString();
         TypeOfCase =model.getValueAt(selectedRow, 14).toString();
    }//GEN-LAST:event_CaseTableMouseClicked
public ArrayList<Cases> CaseListTableSort(String Query) throws SQLException
    {
        ArrayList<Cases> CaseListTableSort = new ArrayList<>();
        ConnectMSSQL cnObj = new ConnectMSSQL();
        cnObj.connectDB();
        Statement st=cnObj.connection.createStatement();
        ResultSet rs= st.executeQuery(Query);
        Cases CasesObj;
        while(rs.next())
        {   
            CasesObj=new Cases(rs.getInt("CaseNo"),
            rs.getInt ("SectionNo"),rs.getInt("PoliceStationId"),rs.getInt("PoliceOfficerId"),rs.getInt ("MagistrateSection") ,rs.getString ("StolenGoods"),rs.getString ("RevivedGoods"),
            rs.getString ("CaseAcceptance"), rs.getInt ("ComplainLetterNo"),rs.getString ("FinalReport"),rs.getString ("CriminalStatus"),
            rs.getString ("InvestigatingOfficerName"),rs.getString ("CaseFilerName"),rs.getString ("AreaOfCrime"),rs.getString ("ClosingDate"),
            rs.getString("ReceivingDate"),rs.getString("TypeOfCase"));
            
            
            CaseListTableSort.add(CasesObj);
        }
        return CaseListTableSort;
    }

    public void ShowCaseTableSort(String Query) throws SQLException
    {
        ArrayList<Cases> cList=CaseListTableSort(Query);
        DefaultTableModel Model= new DefaultTableModel();
   
        Model.setColumnIdentifiers(new Object[]{"CaseNo","SectionNo","MagistrateSection","StolenGoods","RevivedGoods","CaseAcceptance","ComplainLetterNo","FinalReport","CriminalStatus","InvestigatingOfficerName","CaseFilerName","AreaOfCrime","ClosingDate","ReceivingDate","TypeOfCase","PoliceStationId","PoliceOfficerId"});
    
        Object[] row= new Object[17];
        for(int i=0;i<cList.size();i++)
        {
            row[0]=cList.get(i).getCaseNo();
            row[1]=cList.get(i).getSectionNo();
            row[2]=cList.get(i).getMagistrateSection();
            row[3]=cList.get(i).getStolenGoods();  
            row[4]=cList.get(i).getRevivedGoods();
            row[5]=cList.get(i).getCaseAcceptance();
            row[6]=cList.get(i).getComplainLetterNo();
            row[7]=cList.get(i).getFinalReport(); 
            row[8]=cList.get(i).getCriminalStatus();
            row[9]=cList.get(i).getInvestigatingOfficerName();
            row[10]=cList.get(i).getCaseFilerName();
            row[11]=cList.get(i).getAreaOfCrime();
            row[12]=cList.get(i).getClosingDate();
            row[13]=cList.get(i).getReceivingDate();
            row[14]=cList.get(i).getTypeOfCase();
            row[15]=cList.get(i).getPoliceStationId();
            row[16]=cList.get(i).getPoliceOfficerId();
            
            Model.addRow(row);
           
        }
        
         CaseTable.setModel(Model);
         
    }
    private void CasesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CasesComboBoxActionPerformed
        try {
            if(CasesComboBox.getSelectedItem().toString().equals("CaseNo"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY CaseNo ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("SectionNo"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY SectionNo ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("MagistrateSection"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY MagistrateSection ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("StolenGoods"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY StolenGoods ASC";
                ShowCaseTableSort(sql1);

            } if(CasesComboBox.getSelectedItem().toString().equals("RevivedGoods"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY RevivedGoods ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("CaseAcceptance"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY CaseAcceptance ASC";
                ShowCaseTableSort(sql1);

            } if(CasesComboBox.getSelectedItem().toString().equals("ComplaintLetterNo"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY ComplainLetterNo ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("FinalReport"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY FinalReport ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("CriminalStatus"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY CriminalStatus ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("InvestigatingOfficer"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY InvestigatingOfficerName ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("ClosingDate"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY ClosingDate ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("CaseFilerName"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY CaseFilerName ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("AreaOfCrime"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY AreaOfCrime ASC";
                ShowCaseTableSort(sql1);

            } if(CasesComboBox.getSelectedItem().toString().equals("ReceivingDate"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY ReceivingDate ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("TypeOfCase"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY TypeOfCase ASC";
                ShowCaseTableSort(sql1);

            } if(CasesComboBox.getSelectedItem().toString().equals("PoliceStationId"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY PoliceStationId ASC";
                ShowCaseTableSort(sql1);

            }
            if(CasesComboBox.getSelectedItem().toString().equals("PoliceOfficerId"))
            {

                String sql1 = "SELECT * FROM Cases ORDER BY PoliceOfficerId ASC";
                ShowCaseTableSort(sql1);

            }

        }
        catch (SQLException ex) {
            Logger.getLogger(CaseTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CasesComboBoxActionPerformed

    private void SearchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaseTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CaseTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CaseTable;
    private javax.swing.JComboBox<String> CasesComboBox;
    private javax.swing.JLabel SORT;
    private javax.swing.JComboBox<String> SearchComboBox;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
