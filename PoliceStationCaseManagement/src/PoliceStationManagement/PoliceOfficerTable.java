/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PoliceStationManagement;
import SQLPackage.*;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PoliceOfficerTable extends javax.swing.JFrame {

    /**
     * Creates new form PoliceOfficerTable
     */
    PoliceOfficerUpdate policeofficerupdate = new PoliceOfficerUpdate();
    String pol_id,pol_name,pol_designation, pol_area,pol_casehandled,pol_phnno,pol_add,pol_dutyhour,pol_yeearofexperience;
    public PoliceOfficerTable() {
        initComponents();
        Font font = new Font("Tahoma", Font.PLAIN, 20);
        this.PoliceOfficerTable.setFont(font);
        int gap = 15;
        this.PoliceOfficerTable.setRowHeight(this.PoliceOfficerTable.getRowHeight()+gap);
        try {
            ShowOfficer();
        } catch (SQLException ex) {
            Logger.getLogger(PoliceOfficerTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
     public ArrayList<Officer> OfficerList() throws SQLException
    {
        ArrayList<Officer> OfficerList = new ArrayList<>();
        ConnectMSSQL cnObj = new ConnectMSSQL();
        cnObj.connectDB();
        String Query1="SELECT * FROM PoliceOfficer";  
        Statement st=cnObj.connection.createStatement();
        ResultSet rs= st.executeQuery(Query1);
        Officer OfficerObj;
        while(rs.next())
        {
            OfficerObj=new Officer(rs.getInt("PoliceOfficerId"),rs.getString("PoliceOfficerName"),rs.getString("Designation"),rs.getString("Area"),rs.getInt("CaseHandledNo"),rs.getInt("PhoneNo"),rs.getString("Address"),rs.getInt("DutyHour"),rs.getInt("YearsOfexperience"));
            OfficerList.add(OfficerObj);
        }
        return OfficerList;
    }

    public void ShowOfficer() throws SQLException
    {
        ArrayList<Officer> poList = OfficerList();
        DefaultTableModel Model= (DefaultTableModel)PoliceOfficerTable.getModel();
        Object[] row= new Object[9];
        for(int i=0;i<poList.size();i++)
        {
            row[0]=poList.get(i).getPoliceOfficerId();
            row[1]=poList.get(i).getPoliceOfficerName();
            row[2]=poList.get(i).getDesignation();
            row[3]=poList.get(i).getArea();  
            row[4]=poList.get(i).getCaseHandledNo();
            row[5]=poList.get(i).getPhoneNo();
            row[6]=poList.get(i).getAddress();
            row[7]=poList.get(i).getDutyHour(); 
            row[8]=poList.get(i).getYearsOfexperience();
            
            Model.addRow(row);
        }
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        PoliceOfficerTable = new javax.swing.JTable();
        Logo_label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        PoliceOfficerUpdateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        SearchTextField = new javax.swing.JTextField();
        SearchComboBox = new javax.swing.JComboBox<>();
        PoliceofficerTableLabel = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        PoliceOfficerComboBox = new javax.swing.JComboBox<>();
        Sort = new javax.swing.JLabel();
        bg_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1250, 885));
        getContentPane().setLayout(null);

        PoliceOfficerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Designation", "Area", "CaseHandledNo", "Phone No", "Address", "Duty Hour", "YearOfExperience"
            }
        ));
        PoliceOfficerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PoliceOfficerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(PoliceOfficerTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 210, 1250, 490);

        Logo_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PoliceStationManagement/logo.png"))); // NOI18N
        getContentPane().add(Logo_label);
        Logo_label.setBounds(1030, 0, 330, 210);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("Search : ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(510, 50, 80, 20);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Search By : ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(100, 50, 110, 22);

        PoliceOfficerUpdateButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        PoliceOfficerUpdateButton.setText("UPDATE");
        PoliceOfficerUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PoliceOfficerUpdateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(PoliceOfficerUpdateButton);
        PoliceOfficerUpdateButton.setBounds(840, 750, 190, 60);

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(1050, 750, 180, 60);

        SearchTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        SearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTextFieldKeyReleased(evt);
            }
        });
        getContentPane().add(SearchTextField);
        SearchTextField.setBounds(600, 30, 390, 50);

        SearchComboBox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SearchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--","Id", "Name", "Designation", "Area", "CaseHandledNo", "Phone No", "Address", "Duty Hour", "YearOfExperience" }));
        getContentPane().add(SearchComboBox);
        SearchComboBox.setBounds(210, 40, 270, 40);

        PoliceofficerTableLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        PoliceofficerTableLabel.setForeground(new java.awt.Color(240, 240, 240));
        PoliceofficerTableLabel.setText("POLICE OFFICER TABLE");
        getContentPane().add(PoliceofficerTableLabel);
        PoliceofficerTableLabel.setBounds(400, 130, 460, 100);

        BackButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        getContentPane().add(BackButton);
        BackButton.setBounds(30, 750, 220, 60);

        PoliceOfficerComboBox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        PoliceOfficerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id", "Name", "Designation", "Area", "CaseHandledNo", "Phone No", "Address", "Duty Hour", "YearOfExperience" }));
        PoliceOfficerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PoliceOfficerComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(PoliceOfficerComboBox);
        PoliceOfficerComboBox.setBounds(210, 100, 270, 40);

        Sort.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Sort.setForeground(new java.awt.Color(255, 255, 255));
        Sort.setText("SORT:");
        getContentPane().add(Sort);
        Sort.setBounds(100, 100, 60, 30);

        bg_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PoliceStationManagement/bg_pic.jpg"))); // NOI18N
        getContentPane().add(bg_label);
        bg_label.setBounds(0, 0, 1250, 890);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        MainPage mObj = new MainPage();
        mObj.show();
        this.setVisible(false);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void SearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTextFieldKeyReleased
        // TODO add your handling code here:
        String columnToSearch = SearchComboBox.getSelectedItem().toString();
        String stringToSearch = SearchTextField.getText();
        try{
            ConnectMSSQL cnObj = new ConnectMSSQL();
            cnObj.connectDB();
            DefaultTableModel Model= (DefaultTableModel)PoliceOfficerTable.getModel();
            Model.setRowCount(0);
            Object[] row= new Object[9];
            if("Id".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE PoliceOfficerId LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                   
                    Model.addRow(row);
                }
            
            }
            else if("Name".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE PoliceOfficerName LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                   row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
            else if("Designation".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE Designation LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
            else if("Area".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE Area LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
             else if("CaseHandledNo".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE CaseHandledNo LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                   row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
            else if("Phone No".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE PhoneNo LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
            else if("Address".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE Address LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
            else if("Duty Hour".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE DutyHour LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
            else if("YearOfExperience".equals(columnToSearch))
            {
                String query = "SELECT * FROM PoliceOfficer WHERE YearsOfExperience LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("PoliceOfficerId");
                    row[1] = rs.getString("PoliceOfficerName");
                    row[2] = rs.getString("Designation");
                    row[3] = rs.getString("Area");
                    row[4] = rs.getInt("CaseHandledNo");
                    row[5] = rs.getInt("PhoneNo");
                    row[6] = rs.getString("Address");
                    row[7] = rs.getInt("DutyHour");
                    row[8] = rs.getInt("YearsOfexperience");
                    Model.addRow(row);
                }
            
            }
            else if("".equals(columnToSearch))
            {
                ShowOfficer();
            }
        }catch(Exception e){
            Logger.getLogger(VictimPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_SearchTextFieldKeyReleased

    private void PoliceOfficerUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PoliceOfficerUpdateButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        
        policeofficerupdate.setVisible(true);
        
        policeofficerupdate.OfficerNameTextField.setText(pol_name);
        policeofficerupdate.DesignationTextField.setText(pol_designation);
        policeofficerupdate.OfficerAreaTextField.setText(pol_area);
        policeofficerupdate.CaseHandledTextField.setText(pol_casehandled);
        policeofficerupdate.OfficerPhoneTextField.setText(pol_phnno);
        policeofficerupdate.OfficerAddressTextField.setText(pol_add);
        policeofficerupdate.DutyhrTextField.setText(pol_dutyhour);
        policeofficerupdate.ExperienceTextField.setText(pol_yeearofexperience);
    }//GEN-LAST:event_PoliceOfficerUpdateButtonActionPerformed

    private void PoliceOfficerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PoliceOfficerTableMouseClicked
        // TODO add your handling code here:
         int selectedRow = PoliceOfficerTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) PoliceOfficerTable.getModel();
        
        pol_name=model.getValueAt(selectedRow,1).toString();
        pol_designation=model.getValueAt(selectedRow, 2).toString();        
        pol_area=model.getValueAt(selectedRow, 3).toString();
        pol_casehandled=model.getValueAt(selectedRow, 4).toString();
        pol_phnno=model.getValueAt(selectedRow, 5).toString();
        pol_add=model.getValueAt(selectedRow, 6).toString();
        pol_dutyhour=model.getValueAt(selectedRow, 7).toString();
        pol_yeearofexperience=model.getValueAt(selectedRow, 8).toString();
    }//GEN-LAST:event_PoliceOfficerTableMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        try{
            ConnectMSSQL cnObj = new ConnectMSSQL();
            cnObj.connectDB();
            int row = PoliceOfficerTable.getSelectedRow();
            String value = (PoliceOfficerTable.getModel().getValueAt(row, 0).toString());
            String query = "DELETE FROM PoliceOfficer WHERE PoliceOfficerId = "+value;
            PreparedStatement pst = (PreparedStatement) cnObj.connection.prepareStatement(query);
            pst.executeUpdate();
            DefaultTableModel model = (DefaultTableModel) PoliceOfficerTable.getModel();
            model.setRowCount(0);
            ShowOfficer();
            JOptionPane.showMessageDialog(null,"Deleted Successfully!!");
            
        }
        catch(Exception e){
            Logger.getLogger(VictimPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
public ArrayList<Officer> OfficerListTableSort(String Query) throws SQLException
    {
        ArrayList<Officer> OfficerListTableSort = new ArrayList<>();
        ConnectMSSQL cnObj = new ConnectMSSQL();
        cnObj.connectDB();
        Statement st=cnObj.connection.createStatement();
        ResultSet rs= st.executeQuery(Query);
        Officer OfficerObj;
        while(rs.next())
        {
            OfficerObj=new Officer(rs.getInt("PoliceOfficerId"),rs.getString("PoliceOfficerName"),rs.getString("Designation"),rs.getString("Area"),rs.getInt("CaseHandledNo"),rs.getInt("PhoneNo"),rs.getString("Address"),rs.getInt("DutyHour"),rs.getInt("YearsOfexperience"));
            OfficerListTableSort.add(OfficerObj);
        }
        return OfficerListTableSort;
    }

    public void ShowOfficerTableSort(String Query) throws SQLException
    {
        ArrayList<Officer> potList = OfficerListTableSort(Query);
        DefaultTableModel Model= new DefaultTableModel();
        Model.setColumnIdentifiers(new Object[]{"PoliceOfficerId","PoliceOfficerName","Designation","Area","CaseHandledNo","PhoneNo","Address","DutyHour","YearsOfexperience"});
        Object[] row= new Object[9];
        for(int i=0;i<potList.size();i++)
        {
            row[0]=potList.get(i).getPoliceOfficerId();
            row[1]=potList.get(i).getPoliceOfficerName();
            row[2]=potList.get(i).getDesignation();
            row[3]=potList.get(i).getArea();  
            row[4]=potList.get(i).getCaseHandledNo();
            row[5]=potList.get(i).getPhoneNo();
            row[6]=potList.get(i).getAddress();
            row[7]=potList.get(i).getDutyHour(); 
            row[8]=potList.get(i).getYearsOfexperience();
            
            Model.addRow(row);
        }
        PoliceOfficerTable.setModel(Model);
         
    }
    private void PoliceOfficerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PoliceOfficerComboBoxActionPerformed
        try {
            if(PoliceOfficerComboBox.getSelectedItem().toString().equals("Id"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY PoliceOfficerId ASC";
                ShowOfficerTableSort(sql1);

            }
            if(PoliceOfficerComboBox.getSelectedItem().toString().equals("Name"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY PoliceOfficerName ASC";
                ShowOfficerTableSort(sql1);

            }
            if(PoliceOfficerComboBox.getSelectedItem().toString().equals("Designation"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY  Designation ASC";
                ShowOfficerTableSort(sql1);

            }
            if(PoliceOfficerComboBox.getSelectedItem().toString().equals("Area"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY Area ASC";
                ShowOfficerTableSort(sql1);

            } if(PoliceOfficerComboBox.getSelectedItem().toString().equals("CaseHandledNo"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY CaseHandledNo ASC";
                ShowOfficerTableSort(sql1);

            }
            if(PoliceOfficerComboBox.getSelectedItem().toString().equals("Phone No"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY PhoneNo ASC";
                ShowOfficerTableSort(sql1);

            } if(PoliceOfficerComboBox.getSelectedItem().toString().equals("Address"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY Address ASC";
                ShowOfficerTableSort(sql1);

            }
            if(PoliceOfficerComboBox.getSelectedItem().toString().equals("Duty Hour"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY DutyHour ASC";
                ShowOfficerTableSort(sql1);

            }
            if(PoliceOfficerComboBox.getSelectedItem().toString().equals("YearOfExperience"))
            {

                String sql1 = "SELECT * FROM PoliceOfficer ORDER BY YearsOfexperience ASC";
                ShowOfficerTableSort(sql1);

            }

        }
        catch (SQLException ex) {
            Logger.getLogger(PoliceOfficerTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PoliceOfficerComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PoliceOfficerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PoliceOfficerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PoliceOfficerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PoliceOfficerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PoliceOfficerTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel Logo_label;
    private javax.swing.JComboBox<String> PoliceOfficerComboBox;
    private javax.swing.JTable PoliceOfficerTable;
    private javax.swing.JButton PoliceOfficerUpdateButton;
    private javax.swing.JLabel PoliceofficerTableLabel;
    private javax.swing.JComboBox<String> SearchComboBox;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JLabel Sort;
    private javax.swing.JLabel bg_label;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
