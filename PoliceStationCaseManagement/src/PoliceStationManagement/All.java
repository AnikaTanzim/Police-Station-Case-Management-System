package PoliceStationManagement;
import SQLPackage.*;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



public class All extends javax.swing.JFrame {

    /**
     * Creates new form AccusedTable
     */
    
    public All() {
        initComponents();
        Font font = new Font("Tahoma", Font.PLAIN, 20);
        this.AllTable.setFont(font);
        int gap = 15;
        this.AllTable.setRowHeight(this.AllTable.getRowHeight()+gap);
        try {
            ShowAll();
            
        } catch (SQLException ex) {
            Logger.getLogger(VictimTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public ArrayList<getAll> AllList() throws SQLException
    {
        ArrayList<getAll> AllList = new ArrayList<>();
        ConnectMSSQL cnObj = new ConnectMSSQL();
        cnObj.connectDB();
        String Query1="select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo;";  
        Statement st=cnObj.connection.createStatement();
        ResultSet rs= st.executeQuery(Query1);
        getAll AllObj;
        while(rs.next())
        {
            AllObj=new getAll(rs.getInt("CaseNo"),rs.getString("VictimName"),rs.getString("AccusedName"),rs.getString("WitnessName"),rs.getString("EvidenceName"));
            AllList.add(AllObj);
        }
        return AllList;
    }

    public void ShowAll() throws SQLException
    {
        ArrayList<getAll> aList = AllList();
        DefaultTableModel Model= (DefaultTableModel)AllTable.getModel();
        Object[] row= new Object[11];
        for(int i=0;i<aList.size();i++)
        {
            row[0]=aList.get(i).getcaseId();
            row[1]=aList.get(i).getvictimName();
            row[2]=aList.get(i).getAccusedName();
            row[3]=aList.get(i).getwitnessName();
            row[4]=aList.get(i).getevidenceName();  
            
            Model.addRow(row);
        }
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton_back = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AllTable = new javax.swing.JTable();
        SearchComboBox = new javax.swing.JComboBox<>();
        SearchTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        AllComboBox = new javax.swing.JComboBox<>();
        Sort = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jButton_back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_back.setText("BACK");
        jButton_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_backActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_back);
        jButton_back.setBounds(70, 650, 170, 50);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("All Basic Information:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(410, 130, 410, 110);

        AllTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CaseNo", "VictimName", "AccusedName", "WitnessName", "EvidenceName"
            }
        ));
        AllTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AllTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AllTable);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 240, 1230, 350);

        SearchComboBox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SearchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--Select--", "CaseNo","VictimName","AccusedName","WitnessName","EvidenceName"}));
        SearchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(SearchComboBox);
        SearchComboBox.setBounds(190, 40, 220, 40);

        SearchTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        SearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTextFieldActionPerformed(evt);
            }
        });
        SearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTextFieldKeyReleased(evt);
            }
        });
        jPanel1.add(SearchTextField);
        SearchTextField.setBounds(520, 40, 430, 40);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Search :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(440, 50, 80, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Search By : ");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(70, 50, 110, 20);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PoliceStationManagement/logo.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(1030, 10, 210, 210);

        AllComboBox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        AllComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "CaseNo", "VictimName", "AccusedName", "WitnessName", "EvidenceName" }));
        AllComboBox.setToolTipText("");
        AllComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(AllComboBox);
        AllComboBox.setBounds(190, 100, 220, 40);

        Sort.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Sort.setForeground(new java.awt.Color(255, 255, 255));
        Sort.setText("SORT:");
        jPanel1.add(Sort);
        Sort.setBounds(70, 112, 80, 20);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PoliceStationManagement/bg_pic.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1250, 880);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1250, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_backActionPerformed
        // TODO add your handling code here:
          MainPage mObj = new MainPage();
        mObj.show();
        this.setVisible(false);
    }//GEN-LAST:event_jButton_backActionPerformed

    private void SearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTextFieldKeyReleased
        // TODO add your handling code here:
        String columnToSearch = SearchComboBox.getSelectedItem().toString();
        String stringToSearch = SearchTextField.getText();
        try{
            ConnectMSSQL cnObj = new ConnectMSSQL();
            cnObj.connectDB();
            DefaultTableModel Model= (DefaultTableModel)AllTable.getModel();
            Model.setRowCount(0);
            Object[] row= new Object[11];
            if("CaseNo".equals(columnToSearch))
            {
                String query = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo WHERE Cases.CaseNo LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getString("VictimName");
                    row[2] = rs.getString("AccusedName");
                    row[3] = rs.getString("WitnessName");
                    row[4] = rs.getString("EvidenceName");
             
                    Model.addRow(row);
                }
            
            }
            else if("VictimName".equals(columnToSearch))
            {
                String query = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo WHERE VictimName LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getString("VictimName");
                    row[2] = rs.getString("AccusedName");
                    row[3] = rs.getString("WitnessName");
                    row[4] = rs.getString("EvidenceName");
             
                    Model.addRow(row);
                }
            }
            else if("AccusedName".equals(columnToSearch))
            {
                String query = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo WHERE AccusedName LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getString("VictimName");
                    row[2] = rs.getString("AccusedName");
                    row[3] = rs.getString("WitnessName");
                    row[4] = rs.getString("EvidenceName");
             
                    Model.addRow(row);
                }
            }
            else if("WitnessName".equals(columnToSearch))
            {
                String query = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo WHERE WitnessName LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getString("VictimName");
                    row[2] = rs.getString("AccusedName");
                    row[3] = rs.getString("WitnessName");
                    row[4] = rs.getString("EvidenceName");
             
                    Model.addRow(row);
                }
            }
            else if("EvidenceName".equals(columnToSearch))
            {
                String query = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo WHERE EvidenceName LIKE'%"+stringToSearch+"%'";
                Statement st=cnObj.connection.createStatement();
                ResultSet rs= st.executeQuery(query);
                while(rs.next()){
                    row[0] = rs.getInt("CaseNo");
                    row[1] = rs.getString("VictimName");
                    row[2] = rs.getString("AccusedName");
                    row[3] = rs.getString("WitnessName");
                    row[4] = rs.getString("EvidenceName");
             
                    Model.addRow(row);
                }
            }
            else if("".equals(columnToSearch))
            {
                ShowAll();
            }
        }catch(Exception e){
            Logger.getLogger(VictimPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_SearchTextFieldKeyReleased

    private void AllTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AllTableMouseClicked
        // TODO add your handling code here
    }//GEN-LAST:event_AllTableMouseClicked
public ArrayList<getAll> AllListTable(String Query) throws SQLException
    {
        
                ArrayList<getAll> AllList = new ArrayList<>();
        ConnectMSSQL cnObj = new ConnectMSSQL();
        cnObj.connectDB();
        
        Statement st=cnObj.connection.createStatement();
        ResultSet rs= st.executeQuery(Query);
        getAll AllObj;
        while(rs.next())
        {
            AllObj=new getAll(rs.getInt("CaseNo"),rs.getString("VictimName"),rs.getString("AccusedName"),rs.getString("WitnessName"),rs.getString("EvidenceName"));
            AllList.add(AllObj);
        }
        return AllList;
        
        
      
    }

    public void ShowAllTable(String query) throws SQLException
    {
        
        ArrayList<getAll> aList = AllListTable(query);
        DefaultTableModel Model=new DefaultTableModel() ;
        Model.setColumnIdentifiers(new Object[]{"CaseNo","VictimName","AccusedName","WitnessName","EvidenceName"});
        
        
        Object[] row= new Object[11];
        for(int i=0;i<aList.size();i++)
        {
            row[0]=aList.get(i).getcaseId();
            row[1]=aList.get(i).getvictimName();
            row[2]=aList.get(i).getAccusedName();
            row[3]=aList.get(i).getwitnessName();
            row[4]=aList.get(i).getevidenceName();  
            
            Model.addRow(row);
        }
        
        AllTable.setModel(Model);
        
        
        
        
        
        
    }
    private void AllComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllComboBoxActionPerformed
        // TODO add your handling code here:
        try {
            if(AllComboBox.getSelectedItem().toString().equals("CaseNo"))
            {

                String sql1 = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo ORDER BY Cases.CaseNo ASC";
                ShowAllTable(sql1);

            }
            if(AllComboBox.getSelectedItem().toString().equals("VictimName"))
            {

                String sql1 = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo ORDER BY VictimName ASC";
                ShowAllTable(sql1);

            }
            if(AllComboBox.getSelectedItem().toString().equals("AccusedName"))
            {

                String sql1 = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo ORDER BY AccusedName ASC";
                ShowAllTable(sql1);

            }

            if(AllComboBox.getSelectedItem().toString().equals("WitnessName"))
            {

                String sql1 = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo ORDER BY WitnessName ASC";
                ShowAllTable(sql1);

            } if(AllComboBox.getSelectedItem().toString().equals("EvidenceName"))
            {

                String sql1 = "select cases.CaseNo ,Victim.VictimName,Accused.AccusedName,Witness.WitnessName,Evidence.EvidenceName from (((cases  left join Witness  on cases.CaseNo=Witness.CaseNo) left join Evidence on cases.CaseNo=Evidence.CaseNo) left join Accused on cases.CaseNo=Accused.CaseNo) left join Victim on cases.CaseNo=Victim.CaseNo ORDER BY EvidenceName ASC";
                ShowAllTable(sql1);

            }
            

        }
        catch (SQLException ex) {
            Logger.getLogger(AccusedTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AllComboBoxActionPerformed

    private void SearchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchComboBoxActionPerformed

    private void SearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccusedTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccusedTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccusedTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccusedTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccusedTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AllComboBox;
    private javax.swing.JTable AllTable;
    private javax.swing.JComboBox<String> SearchComboBox;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JLabel Sort;
    private javax.swing.JButton jButton_back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
